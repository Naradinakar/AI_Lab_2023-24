# Ex.No: 10 Learning â€“ Use Supervised Learning  
### DATE: 28.10.24                                                                           
### REGISTER NUMBER : 212221060185
### AIM: 
To write a program to train the classifier for User Behaviour Dataset.
###  Algorithm:

1.Load Data: Import the dataset and examine columns for preprocessing.

2.Data Preprocessing: Encode categorical features and handle missing values using median imputation.

3.Feature Scaling: Split the data into training and test sets, then scale features for consistency.

4.Train Classifier: Initialize and train an MLPClassifier on the scaled training data.

5.Evaluate Model: Measure the model's accuracy on both training and test sets to validate performance.

6.Deploy with Gradio: Create a Gradio interface to input user data, process it, and display predictions.
### Program:
```
from google.colab import drive
drive.mount('/content/gdrive')

# Import necessary packages
import numpy as np
import pandas as pd
import gradio as gr
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.impute import SimpleImputer

# Load the dataset
data_path = '/content/gdrive/MyDrive/demo/gradio_project-main/user_behavior.csv'
data = pd.read_csv(data_path)
data.head()

# Display columns for reference
print(data.columns)

# Preprocess categorical columns
# Convert 'Gender' to numerical values ('Male' as 1 and 'Female' as 0)
data['Gender'] = data['Gender'].map({'Male': 1, 'Female': 0})

# Define features and target
x = data.drop(['User ID', 'Device Model', 'Operating System', 'User Behavior Class'], axis=1)
y = data['User Behavior Class']

# Handle missing values by replacing them with the median
imputer = SimpleImputer(strategy='median')
x_imputed = imputer.fit_transform(x)

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x_imputed, y, test_size=0.2, random_state=42)

# Scale the data
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

# Define and train the model
model = MLPClassifier(max_iter=1000, alpha=1)
model.fit(x_train_scaled, y_train)

# Print model accuracy
print("Model Accuracy on training set:", model.score(x_train_scaled, y_train))
print("Model Accuracy on test set:", model.score(x_test_scaled, y_test))

# Define the prediction function
def predict_user_behavior(app_usage_time, screen_on_time, battery_drain, num_apps_installed, data_usage, age, gender):
    gender_encoded = 1 if gender.lower() == 'male' else 0
    input_data = np.array([app_usage_time, screen_on_time, battery_drain, num_apps_installed, data_usage, age, gender_encoded])
    input_scaled = scaler.transform([input_data])
    prediction = model.predict(input_scaled)
    return prediction[0]

# Set up Gradio interface
app = gr.Interface(
    fn=predict_user_behavior,
    inputs=['number', 'number', 'number', 'number', 'number', 'number', gr.Radio(["Male", "Female"])],
    outputs='text',
    description="User Behavior Classification"
)

# Launch the Gradio app
app.launch(share=True)

```

### Output:
[https://57ad29b8f77718810e.gradio.live/](https://5ec1a5d86cc421c4ee.gradio.live/)
![image](https://github.com/user-attachments/assets/fc3f8493-bbdd-44e9-8941-3f8ce459f136)



### Result:
Thus the system was trained successfully and the prediction was carried out.
